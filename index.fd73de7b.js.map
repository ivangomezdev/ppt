{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,Q,C,I,I,E,I,K,E,W,C,E,a,C,C,GCIO,IAAM,EAAQ,CACnB,SAAU,GACV,aAAc,CAAE,GAAI,EAAG,GAAI,CAAE,EAC7B,UAAW,EAAE,CACb,QAAS,EAAE,CAGX,WAAY,WACV,OAAO,IAAI,CAAC,OAAO,AACrB,EAEA,WAAY,WACV,IAAI,CAAC,QAAQ,CAAG,GAChB,IAAI,CAAC,OAAO,CAAG,EAAE,AAEpB,EAGC,eAAgB,WAEd,IAAM,EAAO,KAAK,KAAK,CAAC,AAAgB,EAAhB,KAAK,MAAM,GAC/B,AAAS,CAAA,IAAT,EAEF,IAAI,CAAC,QAAQ,CAAG,SACP,AAAS,IAAT,EACT,IAAI,CAAC,QAAQ,CAAG,QACE,IAAT,GACT,CAAA,IAAI,CAAC,QAAQ,CAAG,QADX,CAIT,EAGA,aAAc,SAAU,CAAM,EAG5B,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,aAAa,CAAC,GAGnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,AAAC,GAAa,EAAS,GAEhD,EAEA,UAAW,SAAU,CAAiB,EACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EACtB,EAGA,cAAe,SAAS,CAAa,EAC/B,AAAU,YAAV,GACF,IAAI,CAAC,OAAO,CAAG,WACd,IAAI,CAAC,YAAY,CAAC,EAAE,IACJ,WAAV,IACP,IAAI,CAAC,OAAO,CAAG,UACb,IAAI,CAAC,YAAY,CAAC,EAAE,GAK1B,EAGA,cAAe,SAAU,CAAQ,EAC3B,IAAa,IAAI,CAAC,QAAQ,GAEnB,AAAY,UAAZ,EACL,AAAiB,SAAjB,IAAI,CAAC,QAAQ,CAEf,IAAI,CAAC,aAAa,CAAC,WAEO,UAAjB,IAAI,CAAC,QAAQ,EACtB,IAAI,CAAC,aAAa,CAAC,YAIZ,AAAY,SAAZ,EACL,AAAiB,UAAjB,IAAI,CAAC,QAAQ,CACf,IAAI,CAAC,aAAa,CAAC,WAGO,UAAjB,IAAI,CAAC,QAAQ,EACtB,IAAI,CAAC,aAAa,CAAC,YAIA,UAAZ,IACL,AAAiB,SAAjB,IAAI,CAAC,QAAQ,CACf,IAAI,CAAC,aAAa,CAAC,YAGO,UAAjB,IAAI,CAAC,QAAQ,EACtB,IAAI,CAAC,aAAa,CAAC,YAOzB,CAGF,C,G,E","sources":["<anon>","state/state.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireb11a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireb11a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"joAEj\", function(module, exports) {\n\n$parcel$export(module.exports, \"state\", () => $683bdd252c9315ec$export$ca000e230c0caa3e);\n//Declaro los valores a tipar con un TYPE // declare a value w/a type\nconst $683bdd252c9315ec$export$ca000e230c0caa3e = {\n    pcChoice: \"\",\n    matchCounter: {\n        pc: 0,\n        me: 0\n    },\n    listeners: [],\n    results: [],\n    //obtengo el resultado\n    getResults: function() {\n        return this.results;\n    },\n    resetState: function() {\n        this.pcChoice = \"\";\n        this.results = [];\n    },\n    //funcion donde la pc escoge entre p,p o t // function where the pc chooses between r,p or s\n    pcSelectChoice: function() {\n        //buscar un numero aleatorio entre 0 y 2 // search a aleatory number between 0 and 2\n        const ppot = Math.floor(Math.random() * 3);\n        if (ppot === 0) // si mi numero aleatorio es x entonces la eleccion es... // if my aleatory number is x so the election is\n        this.pcChoice = \"piedra\";\n        else if (ppot === 1) this.pcChoice = \"papel\";\n        else if (ppot === 2) this.pcChoice = \"tijera\";\n    },\n    //funcion donde el usuario escoge entre p,p o t // function where the user chooses between r,p or s\n    selectChoice: function(option) {\n        //llamo a la eleccion PC // call to pc election\n        this.pcSelectChoice();\n        this.processResult(option);\n        this.listeners.forEach((callback)=>callback(option));\n    },\n    subscribe: function(listener) {\n        this.listeners.push(listener);\n    },\n    //manejar victoria/derrota // handle victory or lose\n    handleVictory: function(result) {\n        if (result == \"Victoria\") {\n            this.results = \"Victoria\";\n            this.matchCounter.me++;\n        } else if (result == \"Derrota\") {\n            this.results = \"Derrota\";\n            this.matchCounter.pc++;\n        }\n    },\n    //procesar resultado // process results\n    processResult: function(election) {\n        if (election === this.pcChoice) ;\n        else if (election == \"piedra\") {\n            if (this.pcChoice == \"papel\") this.handleVictory(\"Derrota\");\n            else if (this.pcChoice == \"tijera\") this.handleVictory(\"Victoria\");\n        } else if (election == \"papel\") {\n            if (this.pcChoice == \"tijera\") this.handleVictory(\"Derrota\");\n            else if (this.pcChoice == \"piedra\") this.handleVictory(\"Victoria\");\n        } else if (election == \"tijera\") {\n            if (this.pcChoice == \"papel\") this.handleVictory(\"Victoria\");\n            else if (this.pcChoice == \"piedra\") this.handleVictory(\"Derrota\");\n        }\n    }\n};\n\n});\n\n\nparcelRequire(\"joAEj\");\n\n//# sourceMappingURL=index.fd73de7b.js.map\n","//Declaro los valores a tipar con un TYPE // declare a value w/a type\r\n\r\ntype Result = \"Victoria\" | \"Derrota\";\r\n//creo un estado // create a state\r\nexport const state = {\r\n  pcChoice: \"\",\r\n  matchCounter: { pc: 0, me: 0 }, \r\n  listeners: [],\r\n  results: [] as Result[],\r\n\r\n  //obtengo el resultado\r\n  getResults: function () {\r\n    return this.results;\r\n  },\r\n\r\n  resetState: function () {\r\n    this.pcChoice = \"\";\r\n    this.results = [];\r\n\r\n },\r\n\r\n  //funcion donde la pc escoge entre p,p o t // function where the pc chooses between r,p or s\r\n  pcSelectChoice: function () {\r\n    //buscar un numero aleatorio entre 0 y 2 // search a aleatory number between 0 and 2\r\n    const ppot = Math.floor(Math.random() * 3);\r\n    if (ppot === 0) {\r\n      // si mi numero aleatorio es x entonces la eleccion es... // if my aleatory number is x so the election is\r\n      this.pcChoice = \"piedra\";\r\n    } else if (ppot === 1) {\r\n      this.pcChoice = \"papel\";\r\n    } else if (ppot === 2) {\r\n      this.pcChoice = \"tijera\";\r\n    }\r\n    \r\n  },\r\n\r\n  //funcion donde el usuario escoge entre p,p o t // function where the user chooses between r,p or s\r\n  selectChoice: function (option) {\r\n    \r\n    //llamo a la eleccion PC // call to pc election\r\n    this.pcSelectChoice();\r\n    this.processResult(option)\r\n  \r\n\r\n    this.listeners.forEach((callback) => callback(option));\r\n    \r\n  },\r\n\r\n  subscribe: function (listener:Function) {\r\n    this.listeners.push(listener);\r\n  },\r\n\r\n  //manejar victoria/derrota // handle victory or lose\r\n  handleVictory: function(result:Result){\r\n    if (result == \"Victoria\") {\r\n      this.results = \"Victoria\";\r\n       this.matchCounter.me++\r\n    }else if(result == \"Derrota\"){\r\n      this.results = \"Derrota\";\r\n        this.matchCounter.pc++\r\n    }else{\r\n        \r\n        \r\n    }\r\n  },\r\n\r\n  //procesar resultado // process results\r\n  processResult: function (election) {\r\n    if (election === this.pcChoice) {\r\n      \r\n    } else if (election == \"piedra\") {\r\n      if (this.pcChoice == \"papel\") {\r\n        \r\n        this.handleVictory(\"Derrota\");\r\n       \r\n      } else if (this.pcChoice == \"tijera\") {\r\n        this.handleVictory(\"Victoria\")\r\n        \r\n        \r\n      }\r\n    } else if (election == \"papel\") {\r\n      if (this.pcChoice == \"tijera\") {\r\n        this.handleVictory(\"Derrota\");\r\n        \r\n        \r\n      } else if (this.pcChoice == \"piedra\") {\r\n        this.handleVictory(\"Victoria\");\r\n        \r\n        \r\n      }\r\n    } else if (election == \"tijera\") {\r\n      if (this.pcChoice == \"papel\") {\r\n        this.handleVictory(\"Victoria\");\r\n        \r\n        \r\n      } else if (this.pcChoice == \"piedra\") {\r\n        this.handleVictory(\"Derrota\");\r\n        \r\n\r\n        \r\n      }\r\n    }\r\n   \r\n  },\r\n\r\n\r\n};\r\n\r\n\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$683bdd252c9315ec$export$ca000e230c0caa3e","set","s","enumerable","configurable","pcChoice","matchCounter","pc","me","listeners","results","getResults","resetState","pcSelectChoice","ppot","Math","floor","random","selectChoice","option","processResult","forEach","callback","subscribe","listener","push","handleVictory","result","election"],"version":3,"file":"index.fd73de7b.js.map"}